#include<stdio.h> 
#include <stdbool.h> 
#include <stdlib.h>

#define SIZE 24
#define nRows 8
#define nCols 3

// PROTOTYPES
void print_array(int array[], int length);
void print_matrix(int mat[][nCols], int rows);
void insert_element(int arr[], int length, int pos, int value);
void remove_element(int arr[], int length,int pos);
void reshape(const int arr[], int length, int nCols, int arr2d[nRows][nCols]);
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols],int mat[nCols][ nRows]): 
bool found_duplicate(int arr[],int length, ….)
bool isValid(const int arr[],int length, int pos,…): 



int main()
{
int arr[SIZE];
int arr2d[nRows][nCols];
print_matrix(arr2d,nRows);
//Call to different functions
}

void print_array(int array[], int length){
   for(int i=0;i<length; i++)
      printf("array[%d]= %d\n", i, array[i]);
}

void print_matrix(int mat[][nCols], int rows){
   for(int i=0;i<rows; i++){
    for(int j=0;j<nCols; j++)
         printf("mat[%d][%d]= %d\n", i,j, mat[i][j]);
    puts("");     
   }     
}
void insert_element(int arr[], int length, int pos, int value) {
    if (!isValid(arr, length + 1, pos)) {
        printf("Invalid position for insertion: %d\n", pos);
        return;
    }
    
    for (int i = length; i > pos; i--) {
        arr[i] = arr[i - 1];
    }
    arr[pos] = value;
}
void remove_element(int arr[], int length,int pos);
 if(!isValid(arr, length, pos)) {
   printf("invalid position for removal %d\n", pos);
   return;
for (int i = pos; i < length - 1; i++) {
        arr[i] = arr[i + 1];
    }
 }

bool isValid(const int arr[], int length, int pos) {
    return (pos >= 0 && pos < length);
}

void reshape(const int arr[], int length, int nRows, int nCols, int arr2d[nRows][nCols]) {
    if (length != nRows * nCols) {
        printf("Error: Length of arr does not match nRows * nCols\n");
        return;
    }
    
    for (int col = 0; col < nCols; col++) {
        for (int row = 0; row < nRows; row++) {
            arr2d[row][col] = arr[col * nRows + row];
        }
    }
}
void trans_matrix(int nRows, int nCols, const int mat[nRows][nCols], int mat[nCols][nRows]) {
    for (int i = 0; i < nRows; i++) 
        for (int j = 0; j < nCols; j++) {
            mat[j][i] = mat[i][j];
        }
